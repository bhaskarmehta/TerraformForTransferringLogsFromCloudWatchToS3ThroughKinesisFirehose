provider "aws" {
  region = "ap-south-1"
}

variable "log_group_names" {
  type    = list(string)
  default = [
    "/aws/lambda/lambda_trigger",
    "/aws/lambda/myfirstlamdafunc"
  ]
}

resource "aws_s3_bucket" "logs_bucket" {
  bucket = "cloudwatch-logs-to-s3-bucket" # Change to your desired bucket name
}

resource "aws_iam_role" "firehose_role" {
  name = "firehose_delivery_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "firehose.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_policy" "firehose_policy" {
  name   = "firehose_delivery_policy"
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = [
          "s3:PutObject",
          "s3:PutObjectAcl"
        ]
        Resource = "${aws_s3_bucket.logs_bucket.arn}/*"
      },
      {
        Effect   = "Allow"
        Action   = [
          "kinesis:GetRecords",
          "kinesis:GetShardIterator",
          "kinesis:DescribeStream",
          "kinesis:ListStreams",
          "kinesis:PutRecord",
          "kinesis:PutRecords"
        ]
        Resource = aws_kinesis_stream.cloudwatch_kinesis_stream.arn
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "firehose_policy_attachment" {
  role       = aws_iam_role.firehose_role.name
  policy_arn = aws_iam_policy.firehose_policy.arn
}

resource "aws_iam_role" "cloudwatch_role" {
  name = "cloudwatch_logs_to_kinesis_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "logs.ap-south-1.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_policy" "cloudwatch_policy" {
  name   = "cloudwatch_logs_policy"
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = [
          "kinesis:PutRecord",
          "kinesis:PutRecords"
        ]
        Resource = aws_kinesis_stream.cloudwatch_kinesis_stream.arn
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "cloudwatch_policy_attachment" {
  role       = aws_iam_role.cloudwatch_role.name
  policy_arn = aws_iam_policy.cloudwatch_policy.arn
}

resource "aws_kinesis_stream" "cloudwatch_kinesis_stream" {
  name             = "cloudwatch-kinesis-stream"
  shard_count      = 1
  retention_period = 24
}

# Create a Firehose Delivery Stream for each log group with a sanitized name
resource "aws_kinesis_firehose_delivery_stream" "cloudwatch_to_s3" {
  for_each    = toset(var.log_group_names)
  
  # Replace "/" in log group names to create a valid Firehose stream name
  name        = "cloudwatch-to-s3-firehose-${replace(each.key, "/", "-")}"
  destination = "extended_s3"

  extended_s3_configuration {
    role_arn           = aws_iam_role.firehose_role.arn
    bucket_arn         = aws_s3_bucket.logs_bucket.arn
    compression_format = "GZIP"

    # Separate prefix for each log group
    prefix = "logs/${each.key}/"
  }

  kinesis_source_configuration {
    kinesis_stream_arn = aws_kinesis_stream.cloudwatch_kinesis_stream.arn
    role_arn           = aws_iam_role.firehose_role.arn
  }
}

resource "aws_cloudwatch_log_subscription_filter" "kinesis_subscription" {
  for_each        = toset(var.log_group_names)
  name            = "kinesis-subscription-${each.key}"
  log_group_name  = each.value
  filter_pattern  = ""
  destination_arn = aws_kinesis_stream.cloudwatch_kinesis_stream.arn
  role_arn        = aws_iam_role.cloudwatch_role.arn
}
